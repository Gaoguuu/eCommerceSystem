{"remainingRequest":"D:\\projectWork\\thirdGrade\\econmic\\vue-admin-design\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projectWork\\thirdGrade\\econmic\\vue-admin-design\\src\\components\\TextSetting\\index.vue?vue&type=style&index=0&id=1ddfedb4&lang=less","dependencies":[{"path":"D:\\projectWork\\thirdGrade\\econmic\\vue-admin-design\\src\\components\\TextSetting\\index.vue","mtime":1728976157717},{"path":"D:\\projectWork\\thirdGrade\\econmic\\vue-admin-design\\node_modules\\css-loader\\dist\\cjs.js","mtime":1728977242423},{"path":"D:\\projectWork\\thirdGrade\\econmic\\vue-admin-design\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1728977244848},{"path":"D:\\projectWork\\thirdGrade\\econmic\\vue-admin-design\\node_modules\\postcss-loader\\src\\index.js","mtime":1728977243244},{"path":"D:\\projectWork\\thirdGrade\\econmic\\vue-admin-design\\node_modules\\less-loader\\dist\\cjs.js","mtime":1728977242915},{"path":"D:\\projectWork\\thirdGrade\\econmic\\vue-admin-design\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1728977241680},{"path":"D:\\projectWork\\thirdGrade\\econmic\\vue-admin-design\\node_modules\\vue-loader\\lib\\index.js","mtime":1728977244061}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQpAaW1wb3J0ICIuLi8uLi9hc3NldHMvbGVzcy90ZXh0LXNldHRpbmciOw0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AA6NA","file":"index.vue","sourceRoot":"src/components/TextSetting","sourcesContent":["<template>\r\n  <div class=\"text-setting-wrapper\">\r\n    <el-form label-width=\"70px\">\r\n      <!--文本-->\r\n      <el-form-item label=\"文本\">\r\n        <ImageRichText v-model=\"activeEleText.text\" class=\"text-editable\" :active-ele-text=\"activeEleText\" />\r\n      </el-form-item>\r\n      <!--字体-->\r\n      <el-form-item label=\"字体\">\r\n        <el-select v-model=\"activeEleText.style.fontFamily\" size=\"small\">\r\n          <el-option\r\n            v-for=\"item in fontFamilyData\"\r\n            :key=\"item.value\"\r\n            :label=\"item.value\"\r\n            :value=\"item.value\"\r\n            :style=\"{'fontFamily': item.value}\"\r\n          />\r\n        </el-select>\r\n      </el-form-item>\r\n      <!--字号-->\r\n      <el-form-item label=\"字号\">\r\n        <el-select\r\n          v-model=\"activeEleText.style.fontSize\"\r\n          size=\"small\"\r\n        >\r\n          <el-option\r\n            v-for=\"item in fontSizeData\"\r\n            :key=\"item.value\"\r\n            :label=\"item.value\"\r\n            :value=\"item.value\"\r\n          />\r\n        </el-select>\r\n      </el-form-item>\r\n      <!--颜色-->\r\n      <el-form-item label=\"颜色\">\r\n        <!-- 字体颜色 -->\r\n        <div class=\"color-box\">\r\n          <i class=\"vue-dsn-icon-wenzise color-icon\" :style=\"{'color': activeEleText.style.color}\" />\r\n          <el-color-picker v-model=\"activeEleText.style.color\" />\r\n        </div>\r\n        <!-- 背景颜色 -->\r\n        <div class=\"color-box\">\r\n          <i class=\"vue-dsn-icon-beijingse color-icon icon-bg\" :style=\"{'color': activeEleText.style.backgroundColor}\" />\r\n          <el-color-picker v-model=\"activeEleText.style.backgroundColor\" />\r\n        </div>\r\n        <div class=\"style-box\">\r\n          <!-- 加粗 -->\r\n          <span :class=\"['style-item', fontWeight ? 'active' : '']\" @click=\"setFontWeight\">\r\n            <i class=\"vue-dsn-icon-jiacu style-icon\" />\r\n          </span>\r\n          <!-- 对齐 -->\r\n          <div class=\"style-item\">\r\n            <el-dropdown trigger=\"click\" @command=\"handleCommand\">\r\n              <i class=\"vue-dsn-icon-duiqi style-icon\" />\r\n              <el-dropdown-menu slot=\"dropdown\">\r\n                <el-dropdown-item command=\"left\" :style=\"setAlignActive('left')\">左对齐</el-dropdown-item>\r\n                <el-dropdown-item command=\"center\" :style=\"setAlignActive('center')\">居中</el-dropdown-item>\r\n                <el-dropdown-item command=\"right\" :style=\"setAlignActive('right')\">右对齐</el-dropdown-item>\r\n              </el-dropdown-menu>\r\n            </el-dropdown>\r\n          </div>\r\n        </div>\r\n      </el-form-item>\r\n      <el-form-item>\r\n        <el-button type=\"primary\" @click=\"downloadImage\">文本生成图片</el-button>\r\n      </el-form-item>\r\n    </el-form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { base64toBlob } from '@/utils'\r\nimport ImageRichText from '../ImageRichText'\r\n\r\nconst fontFamilyData = [\r\n  { value: '黑体' },\r\n  { value: '宋体' },\r\n  { value: '仿宋' },\r\n  { value: '楷体' },\r\n  { value: '隶书' },\r\n  { value: '微软雅黑' },\r\n  { value: '方正姚体' }\r\n]\r\nconst fontSizeData = [\r\n  { value: '12px' },\r\n  { value: '14px' },\r\n  { value: '16px' },\r\n  { value: '18px' },\r\n  { value: '24px' },\r\n  { value: '32px' },\r\n  { value: '48px' }\r\n]\r\n\r\nexport default {\r\n  name: 'TextSetting',\r\n  components: { ImageRichText },\r\n  props: {\r\n    activeEleText: {\r\n      type: Object,\r\n      default: () => {}\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      fontFamilyData,\r\n      fontSizeData\r\n    }\r\n  },\r\n  computed: {\r\n    // 字体是否加粗\r\n    fontWeight() {\r\n      if (+this.activeEleText.style.fontWeight === 400) {\r\n        return false\r\n      } else {\r\n        return true\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    // 文字大小变化时行高一起变化\r\n    activeEleText: {\r\n      handler(val) {\r\n        this.activeEleText.style.lineHeight = val.style.fontSize\r\n      },\r\n      deep: true\r\n    }\r\n  },\r\n  methods: {\r\n    // 设置粗体\r\n    setFontWeight() {\r\n      if (+this.activeEleText.style.fontWeight === 400) {\r\n        this.activeEleText.style.fontWeight = 600\r\n      } else {\r\n        this.activeEleText.style.fontWeight = 400\r\n      }\r\n    },\r\n    // 设置对齐\r\n    handleCommand(command) {\r\n      this.activeEleText.style.textAlign = command\r\n    },\r\n    // 当前对齐方式\r\n    setAlignActive(type) {\r\n      if (this.activeEleText.style.textAlign === type) {\r\n        return {\r\n          backgroundColor: '#409eff',\r\n          color: '#fff'\r\n        }\r\n      } else {\r\n        return {\r\n          backgroundColor: '',\r\n          color: '#333'\r\n        }\r\n      }\r\n    },\r\n    // 文本生成图片\r\n    textBecomeImg(obj) {\r\n      const canvas = document.createElement('canvas')\r\n      canvas.width = obj.w\r\n      canvas.height = obj.h\r\n      const context = canvas.getContext('2d')\r\n      // 绘制字体距离canvas顶部初始的高度\r\n      const initTop = 4\r\n      const initLeft = 8\r\n      // 设置背景色\r\n      context.fillStyle = obj.style.backgroundColor || 'transparent'\r\n      context.fillRect(0, 0, canvas.width, canvas.height)\r\n      // 设置文本样式\r\n      context.fillStyle = obj.style.color\r\n      context.font = obj.style.fontWeight + ' ' + obj.style.fontSize + ' ' + obj.style.fontFamily\r\n      context.textBaseline = 'top'\r\n      // 设置文本对齐方式\r\n      context.textAlign = obj.style.textAlign\r\n\r\n      const textArr = obj.text.split('')\r\n      let tempStr = ''\r\n      const rowArr = []\r\n      const maxTextWidth = canvas.width - 2 * initLeft\r\n\r\n      for (let i = 0; i < textArr.length; i++) {\r\n        if (context.measureText(tempStr).width < maxTextWidth && context.measureText(tempStr + (textArr[i])).width <= maxTextWidth) {\r\n          tempStr += textArr[i]\r\n        } else {\r\n          rowArr.push(tempStr)\r\n          tempStr = textArr[i]\r\n        }\r\n      }\r\n      rowArr.push(tempStr)\r\n\r\n      let drawLeft\r\n      if (context.textAlign === 'left') {\r\n        drawLeft = initLeft\r\n      } else if (context.textAlign === 'center') {\r\n        drawLeft = maxTextWidth / 2\r\n      } else if (context.textAlign === 'right') {\r\n        drawLeft = maxTextWidth\r\n      }\r\n\r\n      for (let i = 0; i < rowArr.length; i++) {\r\n        context.fillText(rowArr[i], drawLeft, (parseInt(obj.style.fontSize) * i + initTop), maxTextWidth)\r\n      }\r\n\r\n      return canvas.toDataURL('image/png')\r\n    },\r\n    // 下载生成的图片\r\n    downloadImage() {\r\n      const imageBase64 = this.textBecomeImg(this.activeEleText)\r\n      const imageBlob = base64toBlob(imageBase64)\r\n      const link = document.createElement('a')\r\n      const event = document.createEvent('HTMLEvents')\r\n      // initEvent 不加后两个参数会在火狐下报错 事件类型，是否冒泡，是否阻止浏览器的默认行为\r\n      event.initEvent('click', true, true)\r\n      link.download = 'image.png'\r\n      link.href = URL.createObjectURL(imageBlob)\r\n      // 兼容火狐\r\n      link.dispatchEvent(new MouseEvent('click', { bubbles: true, cancelable: true, view: window }))\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n@import \"../../assets/less/text-setting\";\r\n</style>\r\n"]}]}